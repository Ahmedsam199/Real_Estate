// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  Customer Customer[]

  Contract Contract[]

  Property Property[]

  Payment Payment[]

  PrintSettings PrintSettings[]
}
model Customer {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  phone String
  address String
  userId Int
  Property Property[]
  user User @relation(fields: [userId], references: [id])
  contractsAsCustomer Contract[] @relation("CustomerAsCustomer")
  
}
enum PropertyType {
  HOME
  APPARTMENT
  VILLA
  COMMERCIAL
  INDUSTRIAL
  LAND
}
enum PropertyPurpose {
  RENTAL
  SALE
  LEASE
}
enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  UNDER_CONSTRUCTION
}
model Property {
  id Int @id @default(autoincrement())
  title String
  description String?
  customerId Int
  propertySize Float
  customer Customer @relation(fields: [customerId], references: [id])
  propertyType PropertyType
  propertyPurpose PropertyPurpose
  propertyPrice Float
  propertyLocation String
  propertyStatus PropertyStatus
  images        PropertyImage[]  // One-to-many relation
  userId Int
  user User @relation(fields: [userId], references: [id])
  Contract Contract[]
}
model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}
enum ContractType {
  SALE
  RENT
  LEASE
}

enum ContractStatus {
  PENDING
  COMPLETED
  CANCELLED
}
model Contract {
  id              Int               @id @default(autoincrement())
  propertyId      Int
  customerId      Int               // Buyer or Renter
  userId          Int               // Real estate agent or admin
  contractType ContractType
  contractDate DateTime          @default(now())
  startDate       DateTime?         // For RENT or LEASE
  endDate         DateTime?         // For RENT or LEASE
  amount          Float
  status          ContractStatus @default(PENDING)
  commission       Float?            // Optional commission for the agent
  
  // Relations
  property        Property          @relation(fields: [propertyId], references: [id])
  customer        Customer          @relation("CustomerAsCustomer", fields: [customerId], references: [id])
  
  user            User              @relation(fields: [userId], references: [id])
  Payment Payment[]
}
enum PaymentStatus{
  PAID
  ON_HOLD
}
model Payment{
  id Int @id @default(autoincrement())
  contractId Int
  amount Float
  paymentStatus PaymentStatus
  paymentDate DateTime @default(now())
  paymentMethod String
  remarks String?
  userId Int
  user User @relation(fields: [userId],references: [id])
  // Relations
  contract Contract @relation(fields: [contractId], references: [id])
}
model PrintSettings {
  id           Int    @id @default(autoincrement())
  title        String
  html         String @db.Text
  printSetting Json
  userId Int
  User User @relation(fields: [userId],references: [id])
}
